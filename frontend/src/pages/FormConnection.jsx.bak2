// package imports
import { useEffect, useState, useRef } from 'react'
import { Link } from "react-router-dom"
import Peer, { SerializationType } from 'peerjs'

// component imports
import ThemeButtons from '../components/ThemeButtons'

// script imports
import { env } from '../assets/js/determineEnvironment.mjs'
import { getPeers } from '../assets/js/customFetch'
import stringMatch from '../assets/js/stringMatch'

// style imports
import '../assets/styles/form-connections.css'

export default function FormConnection() {
    
    const [clientObject, setClientObject] = useState(null)
    const clientObjectRef = useRef({})
    clientObjectRef.current = clientObject
    const [clientConnectionObject, setClientConnectionObject] = useState(null)

    const [connectionProcessing, setConnectionProcessing] = useState(false)

    // peer list
    const [peerList, setPeerList] = useState([])
    const [peerQuery, setPeerQuery] = useState('')

    const [connectedPeers, setConnectedPeers] = useState([])

    const clientIdInputRef = useRef(null)

    const [clientId, setClientId] = useState(null)

    function validateInput(event){
        const regex = /^[a-zA-Z0-9][a-zA-Z0-9_\- ]*[a-zA-Z0-9]$/;
        if (!regex.test(event.target.value)) {
            event.target.classList.add('invalid');
            event.target.setCustomValidity('The ID must start and end with an alphanumeric character (lower or upper case character or a digit). In the middle of the ID spaces, dashes (-) and underscores (_) are allowed.');
        } else {
            event.target.setCustomValidity('');
            event.target.classList.remove('invalid');
        }
    }
    function notifyOnTarget(notification,target, flashDuration, iterations) {
        console.log(notification)
        const originalText = target.innerHTML
            target.innerHTML = notification
            target.animate([
                { color: 'var(--negative-color)' },
                { color: 'var(--foreground-one)' },
            ], {
                duration: flashDuration,
                iterations: iterations,
                direction:"alternate"
            })
            setTimeout(() => {target.innerHTML = originalText}, flashDuration * iterations)
    }
    async function getAndSetPeerList() {
    // Dependencies for below function:
        const peers = await getPeers()
        // console.log(peers, peerList);
        if(peers.toString() !== peerList.toString()){
            console.log('updating peerlist')
            setPeerList(peers)
        }
        return peers
    }
    async function checkIfIdTaken(id) {
        const peers = await getAndSetPeerList()
        if(peers.includes(id)){
            console.log(id, " is already taken.")
            clientIdInputRef.current.setCustomValidity('That identity is already taken. Choose a different one')
            const oldPlaceholder = clientIdInputRef.current.placeholder
            clientIdInputRef.current.placeholder = id + ' taken'
            setTimeout(() => { clientIdInputRef.current.placeholder = oldPlaceholder}, 1500);
            clientIdInputRef.current.classList.add('invalid')
            return true
        } else {
            clientIdInputRef.current.setCustomValidity('')
            clientIdInputRef.current.classList.remove('invalid')
            return false
        }
    }
    async function resetClient(event) {
        console.log('clearing client')
        if(clientObject){
            clientObject.destroy()
            setClientObject(null)
        }
        if(clientId){
            setClientId(null)
        }
        setPeerQuery('')
        localStorage.removeItem('clientId')
    }

    function toggleConnectionToPeer(event, id, tryToConnect = false, clientObject) {
        let alreadyConnected = false
        connectedPeers.forEach((peerEntry) => {
            if(peerEntry.id == id){
                alreadyConnected = true
                console.log('id already connected', id)
                peerEntry.connection.close()
                removeFromConnectedPeerList(id)
            }
        }); if(alreadyConnected){return}
        console.log('id not already connected')
        
        if(connectedPeers.length >= 1){
            if(event){notifyOnTarget('already max connections',event.target, 100, 5)}
            return
        }
        console.log(clientObject)
        // if(tryToConnect){clientObject.connect()}
        if(!clientObject.disconnected){
            console.log('attempting to peer since client is connected to server')
            let peerConnection = clientObject.connect(id, {SerializationType: 'json'})
            // console.log(peerConnection)

            setConnectionProcessing(true)

            peerConnection.on('open', () => {
                console.log('opened connection to peer (probably local initiator)', id)
                setConnectionProcessing(false)
                getAndSetPeerList().then(()=>{
                    addToConnectedPeerList(id, peerConnection)
                })
            })
            peerConnection.on('close', () => {
                console.log('disconnected from peer', id)
                setConnectionProcessing(false)
                removeFromConnectedPeerList(id)
                console.log(connectedPeers)
            })
            peerConnection.on('error', (error) => {
                console.log('error connecting to peer', id,error)
                setConnectionProcessing(false)
            })
            peerConnection.on('data', (data) => {
                console.log('data: ', data)
                if(data.type = 'connectionIdList'){
                    handleReceiveConnectionIdList(data.data)
                }
            })
        }
    }; useEffect(() => {console.log(connectedPeers)},[connectedPeers])

    function addToConnectedPeerList(id, connection){
        if(!connectedPeers.includes({id: id, connection: connection})){
            setConnectedPeers([...connectedPeers, {id: id, connection: connection}])
        }
    }
    function removeFromConnectedPeerList(id){
        setConnectedPeers(connectedPeers.filter(peerEntry => peerEntry.id !== id))
    }

    // wake up all the states by initializing client and storing it
    async function validateIdAndStoreClient(id) {
        resetClient()
        let client
        if(await checkIfIdTaken(id)){
            
            clientIdInputRef.current.value = localStorage.getItem('clientId')
            return
        }
        client = new Peer(id, env.clientPeerSettings)
        client.on('error', (error) => {
            console.log(error)
            console.log(error.type)
            if(error.type == 'network' || error.type == 'socket-closed' || error.type == 'socket-error'){
                setClientObject(null)
                setClientId(null)
            }
        })
        client.on('open', () => {
            console.log('client open event')
            getAndSetPeerList()
        })
        client.on('connection', (connection) => {
            setConnectionProcessing(true)
            console.log('client connection event (probably remote initiator)')
            connection.on('open', () => {
                console.log('client connection OPEN event (probably remote initiator)')
                setConnectionProcessing(false)
                getAndSetPeerList().then(()=>{
                    addToConnectedPeerList(connection.peer, connection)
                })
            })
            connection.on('data', (data) => { //receiving
                getAndSetPeerList()
                console.log('data: ', data)
                if(data.type = 'connectionIdList'){
                    handleReceiveConnectionIdList(data.data)
                }
            })
            connection.on('close', () => {
                console.log('remote? maybe client close')
                setConnectionProcessing(false)
            })
            connection.on('error', (error) => {
                console.log(error)
                setConnectionProcessing(false)
            })
        })



        setClientObject(client)
        setClientId(id)
        localStorage.setItem('clientId', id)
        // console.log(client)
        return client
    }

    function sendToEachPeer(type, data) {
        console.log('sending to each peer', type, data)
        connectedPeers.forEach((peerEntry) => {
            console.log('sending to ', peerEntry.id)
            peerEntry.connection.send({type: type, data: data})
        })
    }
    function handleReceiveConnectionIdList(idList) {
        console.log(idList)
        idList.filter(id => id != clientId && !connectedPeers.map((peerEntry) => peerEntry.id).includes(id)).forEach((id) => {
            console.log(clientObjectRef.current)
            toggleConnectionToPeer(null, id, true, clientObjectRef.current)
        })
    }

    useEffect(() => {
        sendToEachPeer('connectionIdList', [...connectedPeers.map((peerEntry) => peerEntry.id), clientId].filter(id => id != clientId))
    }, [connectedPeers])

    
    useEffect(() => {
        //useeffect on render
        console.log('useEffect on render')
        getAndSetPeerList()
        if(localStorage.getItem('clientId')){
            validateIdAndStoreClient(localStorage.getItem('clientId'))
        }
    }, [])


    useEffect(() => {
        console.log('clientObject', clientObject)
    }, [clientObject])
    


    return (
        <>  
            <ThemeButtons />
            <Link to={".."}>go back</Link>
            <h1>FormConnection.jsx</h1>
            <div className="center-wrapper form-connection">
                {!clientId 
                ?
                    <>
                        <h1 className='digital-dream'>IDENTIFY YOURSELF</h1>
                        <form onSubmit={(event) => {event.preventDefault(); validateIdAndStoreClient(event.target.children[0].value)}}>
                            <input placeholder='input identity' ref={clientIdInputRef} onChange={validateInput} type="text" name="clientId" id="clientId" />
                            <input type="submit" value="submit" />
                        </form>
                    </>
                :
                    <>
                        <h1 className='digital-dream'>HUMAN IDENTIFIED:</h1>
                        <h1>[<span>{clientId}</span>]<button className='clickable dark' onClick={resetClient}>reset identity</button></h1>
                        <div className='digital-dream'>choose adversary<button className='clickable dark' onClick={getAndSetPeerList}>refresh list</button></div>
                        <input type="text" name="peerQuery" id="peerQuery" placeholder={'filter opponents'} onChange={(event)=>{setPeerQuery(event.target.value)}}/>
                        <ul className={connectionProcessing ? 'no-access' : ''}>{peerList.filter((peerId) => (connectedPeers.includes(peerId) || peerId !== clientId && stringMatch(peerId, peerQuery))).map((peerId) => { return (
                            <li
                                key={peerId} 
                                className={`clickable ${connectedPeers.map((peerEntry) => peerEntry.id).includes(peerId) ? 'connected' : ''}`} 
                                onClick={(event)=>{toggleConnectionToPeer(event, peerId, false, clientObjectRef.current)}}
                            >{peerId}</li>
                        )})}</ul>
                    </>
                }
            </div>
        </>
    )
}

/*
ideas

make connection with instructions

set id?

show new map, blur it, and unblur it once the map change is confirmed received by recipient

add a button to full map list,
map list would open and be a modal
but it would close when you pick a map or have back button


*/