import { Link } from "react-router-dom"
import { useContext, useEffect, useState } from "react"
import {Peer} from "peerjs"

import NetworkVisualizer from "../components/NetworkVisualizer"

import ThemeButtons from "../components/ThemeButtons"

import { env } from "../assets/js/determineEnvironment.mjs"
import { ClientContext } from "../clientContext"

export default function Network() {

    const {
        clientId,
        clientObject,
        currentLobby,
        playerPairs, setPlayerPairs,

        clientPeerConnectionList, setClientPeerConnectionList

    } = useContext(ClientContext)

    useEffect(() => {
        console.log("currentLobby", currentLobby)
        console.log("and that lobby's playerList", currentLobby.playerList)

        const peerList = currentLobby.playerList.map(player => player.playerId).filter(player => player !== clientId)
        console.log("peerList", peerList)

        console.log("clientPeerConnectionList", clientPeerConnectionList)
        const newConnections = peerList.map(async (peerId, index) => {
             console.log('trying', clientId, 'to', peerId)
             let client = newClient(clientId, peerId)

             await new Promise(resolve => setTimeout(resolve, 1000)); // Wait for 1 second

             let connection = client.connect(peerId)

             connection.on('open', () => {
                console.log("connection open from", clientId, "to", peerId)
             })

             return {
                clientId: clientId,
                peerId: peerId,
                client: client,
                connection: connection
             }

            }).filter(connection => connection !== null)

        setClientPeerConnectionList(newConnections)
    }, [])

    function newClient(clientId, nameModifier) {
        const combinedName = `mesh${clientId}-${nameModifier}meshgx`
        console.log("newClient", combinedName)
        let client = new Peer(combinedName, env.clientPeerSettings)
        client.on('error', (error) => {
            if(error.type == 'unavailable-id'){
                console.log("Id taken.. if this is in a developer environment it may be due to react running things twice or HMR update. Disable strict mode.")
            } else{
                console.log(error)
            }
        })
        client.on('close', () => {
            console.log("client closed")
        })
        client.on('open', () => {
            console.log("client open", clientId)
        })

        client.on('connection', (connection) => {
            console.log("client connection", connection)
            // clientPeerConnectionList[peerId].connection = connection
            connection.on('data', (data) => {
                console.log("data", data)
            })
        })
        return client
        
    }

    useEffect(() => {
        console.log("clientPeerConnectionList", clientPeerConnectionList)
    }, [clientPeerConnectionList])


    // let testingList = []
    // for(let i = 0; i < 5; i++) {
    //     testingList.push({
    //         playerId: `player${i}`,
    //         owner: false
    //     })
    // }
    return (
        <>
            <ThemeButtons />
            <Link to={".."}>go back</Link>
            <h1>Network</h1>
            <div className="center-wrapper">

                {/* <NetworkVisualizer clientId={clientId} playerList={currentLobby.playerList}/> */}
                <NetworkVisualizer clientId={clientId} playerList={currentLobby.playerList}/>
            </div>
        </>
    )
}